swagger: "2.0"
info:
  version: "0.0.1"
  title: Todo API
host: localhost:10010
basePath: /
schemes:
  - http
  - https
# consumes and produces are both synonyms for the Content-Type type header
# Content-Type for requests represents data sent to the server
# Content-Type for responses represent data received in the response
# Accept is the type of data that a client expects from the server
consumes:
  - application/json
produces:
  - application/json
paths:
  /: 
    get:
      description: "A description: This endpoint returns all todos in database"
      summary: "A shorter summary of the operation"
      operationId: "GetAllTodos"
      parameters: []
      responses:
        "200":
          description: "an array of todos"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Todo"
    post:
      description: 'Add a new Todo'
      # operationId will become clear once we start writing code
      operationId: 'AddTodo'
      # produces is a synonym for Content-Type
      produces: 
        - 'application/json'
      # Our request has parameters
      # Parameters is an array, so each parameter definition must be preceded
      # by a -
      parameters:
        # 'in' refers to the location of the parameters. It could be one of:
        # - body
        # - formData
        # - path (must be set to required - because they're in the path)
        # - query
        # - header
        # - cookie
        - in: 'body'
          # the name of the propery sent in the request
          name: 'todo'
          description: 'the Todo to be added'
          # default values can also be specified, but in the case of required
          # properties it doesn't make sense to use them - the client should
          # be sending them through.
          required: true
          # an enum parameter can also be used to describe a restriction on
          # the values that can be sent. The type inside the enum must match
          # the type of the parameter:
          # - type: string
          # - enum: [bob, sam, aaron]
          
          # 'schema' is only used with 'in: body' parameters
          # 'type' must be used for all other parameter locations
          schema: 
            $ref: "#/definitions/Todo"
      responses:
        '201': 
          description: 'Successful Todo add'
      # this will also become clear once we start writing code
      x-swagger-router-controller: "AddTodo"
      
      
  /swagger:
    x-swagger-pipe: swagger_raw
definitions:
  Todo:
    type: object
    properties:
      todo_id:
        type: "integer"
        description: "Id for the todo"
      todo:
        type: "string"
        description: "The todo itself"
      datecreated:
        type: "string"
        format: "date-time"
        description: "The date the todo was created. Set by server"
      author:
        type: "string"
        description: "Name of the person who created the todo"
      duedate:
        type: "string"
        format: "date-time"
        description: "Date the todo is due"
      completed: 
        type: "boolean"
        description: "Indicate if the todo is completed or not"
    